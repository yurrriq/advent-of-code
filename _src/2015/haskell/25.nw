\subsection{Haskell solution}

Rather than try to generate the codes sequentially, which can quickly result in
a stack overflow, make some observations.

\newthought{The positions in first column} are the
\hrefootnote{https://en.wikipedia.org/wiki/Lazy_caterer's_sequence}{lazy
  caterer's sequence}, i.e. \hrefootnote{https://oeis.org/A000124}{A000124 in
  The Online Encyclopedia of Integer Sequences}.

\begin{equation}
  a(n) = n \times (n - 1) / 2 + 1
\end{equation}

Or equivalently in Haskell:

<<Define a000124>>=
a000124 :: (Integral a) => a -> a
a000124 n = n * (n - 1) `div` 2 + 1
@ %def a000124

Since this problem might involve some rather large numbers, specialize the
polymorphic [[a000124]] to Haskell's arbitrary precision \hs{Integer}, and
ensure the compiler inlines it.

<<Define a000124>>=
{-# SPECIALIZE INLINE a000124 :: Integer -> Integer #-}
@

\newthought{Then to calculate the distance} from that position to that of
another column $c$ in the same row $r$, simply subtract the $r$th
\hrefootnote{https://en.wikipedia.org/wiki/Triangular_number}{triangular number}
from the $(c + r - 1)$th. The triangular numbers are known as
\hrefootnote{https://oeis.org/A000217}{A000217 in The Online Encyclopedia of
  Integer Sequences}.

\begin{equation}
  T(n) = n \times (n + 1) / 2
\end{equation}

Or equivalently in Haskell:

<<Define a000217>>=
a000217 :: (Integral a) => a -> a
a000217 n = n * (n + 1) `div` 2
@ %def a000217

Just as before, specialize to \hs{Integer} and inline.

<<Define a000217>>=
{-# SPECIALIZE INLINE a000217 :: Integer -> Integer #-}
@

So, to find the position in the sequence of codes from a given column and row:

<<Find the position>>=
position = a000124 row + a000217 (column + row - 1) - a000217 row
@

\newthought{The generating function} for the sequence is as follows, where $n
\in \mathbb{N}$ is the position.

\begin{equation}
  f(n) =
  \begin{cases}
    20151125, & \text{for } n=0 \\
    f(n - 1) \times 252533 \pmod{33554393}, & \text{otherwise}
  \end{cases}
\end{equation}

That recursive definition can be rewritten as a closed formula.

\begin{equation}
  f(n) = 20151125 \times 252533^{n-1} \pmod{33554393}
\end{equation}

Or equivalently in Haskell:

<<Find the code at a given position>>=
20151125 * (252533 ^ (position - 1)) `mod` 33554393
@

Thus, Part One can be solved by implementing a function that takes a coordinate
pair and returns the specified code.

<<Define partOne>>=
partOne :: Coordinates -> Integer
partOne (column, row) = <<Find the code at a given position>>
  where
    <<Find the position>>
@ %def partOne

There is nothing to solve for Part Two.

\newthought{To parse the input}, write a silly, overly explicit \hs{Parser}.

<<Import tools for parsing the input>>=
import Control.Monad (void)
import Text.Trifecta (Parser, comma, natural, symbol)
@

<<Define coordinates>>=
coordinates :: Parser Coordinates
coordinates =
  do
    void $ symbol "To continue, please consult the code grid in the manual."
    row <- symbol "Enter the code at row" *> natural <* comma
    column <- symbol "column" *> natural
    pure (column, row)
@ %def coordinates

[[Coordinates]] is just a two-tuple of \hs{Integer}s.

<<Define Coordinates>>=
type Coordinates = (Integer, Integer)
@ %def Coordinates

Define the usual [[getInput]].

<<Import some common utilities>>=
import AdventOfCode.Input (parseInput)
import AdventOfCode.TH (inputFilePath)
@

<<Define getInput>>=
getInput :: IO Coordinates
getInput = parseInput coordinates $(inputFilePath)
@ %def getInput

\newthought{Bring it} all together.

<<Day25.hs>>=
module AdventOfCode.Year2015.Day25 where

<<Import some common utilities>>
<<Import tools for parsing the input>>

<<Define Coordinates>>

main :: IO ()
main =
  do
    putStr "Part One: "
    print . partOne =<< getInput

<<Define partOne>>

<<Define getInput>>

<<Define coordinates>>

<<Define a000124>>

<<Define a000217>>
@
