\subsection{Haskell solution}

\newthought{Define some convient} type aliases.

A [[BoxID]] is just a \hs{String}, and a [[Checksum]] is just an \hs{Integer}.

<<Type aliases>>=
type BoxID = String

type Checksum = Integer
@ %def BoxID
@ %def Checksum

\newthought{To solve Part One,} \hs{Just} compute the [[checksum]].\footnote{See what I did there?}

<<Compute the checksum.>>=
checksum :: [BoxID] -> Checksum
checksum =
  fmap frequencies
    >>> filter (elem 2) &&& filter (elem 3)
    >>> length *** length
    >>> product
    >>> fromIntegral
@ %def checksum

<<Part One>>=
partOne :: [BoxID] -> Maybe Checksum
partOne = Just . checksum
@ %def partOne

\newthought{Solve} Part Two.

<<Correct the box IDs.>>=
correctBoxIDs :: [BoxID] -> Maybe (BoxID, BoxID)
correctBoxIDs = listToMaybe . mapMaybe go . tails
  where
    go (x : xs@(_ : _)) = (x,) <$> find (hammingSimilar 1 x) xs
    go _ = Nothing
@ %def correctBoxIDs

<<Part Two>>=
partTwo :: [BoxID] -> Maybe String
partTwo = fmap (uncurry intersect) . correctBoxIDs
@ %def partTwo


\newthought{Bring it} all together.

<<Day02.hs>>=
{-# LANGUAGE TupleSections #-}

module AdventOfCode.Year2018.Day02 where

import AdventOfCode.Input (parseInput)
import AdventOfCode.TH (defaultMainMaybe, inputFilePath)
import AdventOfCode.Util (frequencies, hammingSimilar)
import Control.Arrow ((&&&), (***), (>>>))
import Data.List (find, intersect, tails)
import Data.Maybe (listToMaybe, mapMaybe)
import Text.Trifecta (letter, newline, sepEndBy, some)

<<Type aliases>>

main :: IO ()
main = $(defaultMainMaybe)

getInput :: IO [BoxID]
getInput = parseInput (some letter `sepEndBy` newline) $(inputFilePath)

<<Part One>>

<<Part Two>>

<<Compute the checksum.>>

<<Correct the box IDs.>>
@
