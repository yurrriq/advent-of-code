\subsection{Haskell Solution}

\newthought{A frequency change} is represented by a summable integer.

<<Define data types to model the puzzle input.>>=
newtype FrequencyChange = FrequencyChange
  {unFrequencyChange :: Integer}
  deriving stock
    (Eq, Ord, Show)
  deriving
    (Semigroup, Monoid)
    via (Sum Integer)
@ %def FrequencyChange


\newthought{Parsing the puzzle input} for Day 1 is easy.  The frequency changes are
represented by signed integers, e.g.

\begin{minted}[gobble=2]{haskell}
  parseString frequencyChanges mempty "+1\n-2\n+3" ==
  Success [Sum {getSum = 1},Sum {getSum = -2},Sum {getSum = 3}]
\end{minted}

<<Parse the input.>>=
getInput :: IO [FrequencyChange]
getInput = parseInput (some (FrequencyChange <$> integer)) $(inputFilePath)
@


\newthought{Computing the answer for Part One} is also a cinch: just sum the changes in frequency.

<<Solve parts one and two.>>=
partOne :: [FrequencyChange] -> Maybe Integer
partOne = Just . unFrequencyChange . mconcat

@

\newthought{To solve Part Two,} compute the list of frequencies reached and find the first duplicate.

<<Solve parts one and two.>>=
partTwo :: [FrequencyChange] -> Maybe Integer
partTwo =
  fmap unFrequencyChange
    . findFirstDup
    . scan
    . cycle
@


\newthought{Bring it} all together.

<<Day01.hs>>=
{-# LANGUAGE DerivingVia #-}

module AdventOfCode.Year2018.Day01 where

import AdventOfCode.Input (parseInput)
import AdventOfCode.TH (defaultMainMaybe, inputFilePath)
import AdventOfCode.Util (findFirstDup, scan)
import Data.Monoid (Sum (..))
import Text.Trifecta (integer, some)

<<Define data types to model the puzzle input.>>

main :: IO ()
main = $(defaultMainMaybe)

<<Parse the input.>>

<<Solve parts one and two.>>
@
